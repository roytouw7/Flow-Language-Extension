package main

from Time import interval, SECOND
import Beta

const main = (...args unknown) => {
    interval(1 * SECOND)
        => map (i) => `second: ${i} && ${args[0]}`
        ~> print;
    
    if (5 > -1 && !false != true || 1 >= 7 && 7 <= 1) {
        switch(alfa) {
            case 1:
                print("papoea");
            default:
                continue;
        }
    } else {
        continue;
    }
}
{
   ((x[1]))
}

let y int = 9;

y
    => filter (i) => i * -7
    ~> print;

/** beautiful */
[let x = 0; for x in range 100; if x % 2 == 0]
    => split
    ~> () => y++;

for(let x = 0; x < 9; x++) {
    for {
        for x > 0 {
            x--;
            const a = [1, 2, 3];
            let y int[];
        }
    }
}

// todo interfaces
// objects or structs

export struct S<T> {
    i int
    b bool | int & T
}

class Alfa extends Beta implements Whateverable<int> {
    constructor() {
        super(9, &this.dickies);
    }

    private dickies = 7;
    public papoea string = "asdf";

    public test = (i ...*int) void => {
        this.dickies = 9;
    }
}

interface Whateverable<T> {
    test() void
    test2(i string) bool | T
}

const p = new Alfa {
    papoea "9999"
};


fn(&p);
